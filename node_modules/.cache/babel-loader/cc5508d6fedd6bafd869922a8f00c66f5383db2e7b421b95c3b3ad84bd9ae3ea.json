{"ast":null,"code":"var _jsxFileName = \"/Users/jaimecastaneda/Projects/Portfolio/portfolio-web/src/components/preloader.react.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { gsap } from 'gsap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Preload = () => {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const [isComplete, setIsComplete] = useState(false);\n  useEffect(() => {\n    const loader = document.getElementById('loader');\n    const currentProgress = document.getElementById('current-progress');\n    const newProgress = document.getElementById('new-progress');\n    const onComplete = () => {\n      // Hide the loader gracefully when the progress reaches 100%\n      gsap.to(loader, {\n        opacity: 0,\n        duration: 1,\n        onComplete: () => loader.style.display = 'none'\n      });\n    };\n    const updateProgress = value => {\n      // Animate the number counter with GSAP\n      const tl = gsap.timeline();\n      tl.to(currentProgress, {\n        opacity: 0,\n        y: -10,\n        duration: 0.5\n      });\n      tl.to(newProgress, {\n        opacity: 1,\n        y: 0,\n        duration: 0.5\n      });\n      setProgress(value);\n    };\n    const getRandomIncrement = () => {\n      // Generate a random increment between 5 and 20 for smooth and random progress\n      return Math.floor(Math.random() * 16) + 5;\n    };\n    const simulateProgress = () => {\n      // Simulate a loading progress from 0% to 100%\n      const interval = setInterval(() => {\n        if (!isComplete) {\n          const increment = getRandomIncrement();\n          const updatedProgress = Math.min(progress + increment, 100); // Clamp to a maximum of 100\n          updateProgress(updatedProgress);\n          if (updatedProgress >= 100) {\n            setIsComplete(true);\n            clearInterval(interval);\n            onComplete();\n          }\n        }\n      }, 500); // Adjust the interval as needed\n    };\n\n    simulateProgress();\n\n    // Clean up event listeners or other resources as needed\n    return () => {\n      // Add any cleanup logic here\n    };\n  }, [progress, isComplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"loader\",\n    style: loaderStyles,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"current-progress\",\n      style: {\n        ...progressStyles,\n        opacity: 1 - progress / 100\n      },\n      children: `${progress}%`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"new-progress\",\n      style: {\n        ...progressStyles,\n        opacity: progress / 100\n      },\n      children: `${progress}%`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n// Styles for the loader and progress number\n_s(Preload, \"aWKCuD/IFqH8AjkN5xDive3KztM=\");\n_c = Preload;\nconst loaderStyles = {\n  position: 'fixed',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  background: 'rgba(255, 255, 255, 0.8)',\n  padding: '16px 32px',\n  borderRadius: '4px',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  fontSize: '24px'\n};\nconst progressStyles = {\n  color: '#007bff',\n  position: 'absolute',\n  top: 0,\n  left: 0\n};\nexport default Preload;\nvar _c;\n$RefreshReg$(_c, \"Preload\");","map":{"version":3,"names":["React","useEffect","useState","gsap","jsxDEV","_jsxDEV","Preload","_s","progress","setProgress","isComplete","setIsComplete","loader","document","getElementById","currentProgress","newProgress","onComplete","to","opacity","duration","style","display","updateProgress","value","tl","timeline","y","getRandomIncrement","Math","floor","random","simulateProgress","interval","setInterval","increment","updatedProgress","min","clearInterval","id","loaderStyles","children","progressStyles","fileName","_jsxFileName","lineNumber","columnNumber","_c","position","top","left","transform","background","padding","borderRadius","justifyContent","alignItems","fontSize","color","$RefreshReg$"],"sources":["/Users/jaimecastaneda/Projects/Portfolio/portfolio-web/src/components/preloader.react.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { gsap } from 'gsap';\n\nconst Preload = () => {\n  const [progress, setProgress] = useState(0);\n  const [isComplete, setIsComplete] = useState(false);\n\n  useEffect(() => {\n    const loader = document.getElementById('loader');\n    const currentProgress = document.getElementById('current-progress');\n    const newProgress = document.getElementById('new-progress');\n\n    const onComplete = () => {\n      // Hide the loader gracefully when the progress reaches 100%\n      gsap.to(loader, {\n        opacity: 0,\n        duration: 1,\n        onComplete: () => (loader.style.display = 'none'),\n      });\n    };\n\n    const updateProgress = (value) => {\n      // Animate the number counter with GSAP\n      const tl = gsap.timeline();\n      tl.to(currentProgress, { opacity: 0, y: -10, duration: 0.5 });\n      tl.to(newProgress, { opacity: 1, y: 0, duration: 0.5 });\n      setProgress(value);\n    };\n\n    const getRandomIncrement = () => {\n      // Generate a random increment between 5 and 20 for smooth and random progress\n      return Math.floor(Math.random() * 16) + 5;\n    };\n\n    const simulateProgress = () => {\n      // Simulate a loading progress from 0% to 100%\n      const interval = setInterval(() => {\n        if (!isComplete) {\n          const increment = getRandomIncrement();\n          const updatedProgress = Math.min(progress + increment, 100); // Clamp to a maximum of 100\n          updateProgress(updatedProgress);\n\n          if (updatedProgress >= 100) {\n            setIsComplete(true);\n            clearInterval(interval);\n            onComplete();\n          }\n        }\n      }, 500); // Adjust the interval as needed\n    };\n\n    simulateProgress();\n\n    // Clean up event listeners or other resources as needed\n    return () => {\n      // Add any cleanup logic here\n    };\n  }, [progress, isComplete]);\n\n  return (\n    <div id=\"loader\" style={loaderStyles}>\n      <span id=\"current-progress\" style={{ ...progressStyles, opacity: 1 - progress / 100 }}>\n        {`${progress}%`}\n      </span>\n      <span id=\"new-progress\" style={{ ...progressStyles, opacity: progress / 100 }}>\n        {`${progress}%`}\n      </span>\n    </div>\n  );\n};\n\n// Styles for the loader and progress number\nconst loaderStyles = {\n  position: 'fixed',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  background: 'rgba(255, 255, 255, 0.8)',\n  padding: '16px 32px',\n  borderRadius: '4px',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  fontSize: '24px',\n};\n\nconst progressStyles = {\n  color: '#007bff',\n  position: 'absolute',\n  top: 0,\n  left: 0,\n};\n\nexport default Preload;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}