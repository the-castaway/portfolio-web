{"ast":null,"code":"var _jsxFileName = \"/Users/jaimecastaneda/Projects/Portfolio/portfolio-web/src/pages/loader/loader.js\",\n  _s = $RefreshSig$();\nimport React, { useLayoutEffect, useRef } from 'react';\nimport { gsap } from \"gsap\";\nimport { SplitText } from \"gsap/SplitText\";\n//styles\nimport '../../styles/loader.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TIME = 5;\nconst Loader = () => {\n  _s();\n  //refs\n  let loaderCounter = useRef(null);\n  let loaderHeader = useRef(null);\n\n  //initialize gsap plugins\n  gsap.registerPlugin(SplitText);\n\n  //counter \n  let counter = {\n    val: 0\n  };\n  useLayoutEffect(() => {\n    let ctx = gsap.context(() => {\n      //define timeline\n      const tl = gsap.timeline(),\n        //loaderCounterSplit = new SplitText(loaderCounter, { type: \"chars\" }),\n        //loaderCounterChars = loaderCounterSplit.chars,\n        loaderHeaderSplit = new SplitText(loaderHeader, {\n          type: \"chars\"\n        }),\n        loaderHeaderChars = loaderHeaderSplit.chars;\n      tl.from(loaderHeaderChars, {\n        duration: 0.5,\n        opacity: 0,\n        y: 20,\n        ease: \"ease\",\n        stagger: 0.05,\n        delay: 0.5\n      });\n      tl.from(loaderCounter, {\n        duration: 0.4,\n        opacity: 0,\n        ease: \"ease\"\n      });\n      tl.to(counter, {\n        duration: TIME,\n        val: 100,\n        onUpdate() {\n          if (counter.val < 10) {\n            loaderCounter.textContent = `${Math.ceil(counter.val)}`;\n          }\n          loaderCounter.textContent = `${Math.ceil(counter.val)}`;\n        },\n        ease: 'none',\n        repeatDelay: 2\n      });\n    });\n    return () => ctx.revert();\n  });\n\n  // const [progress, setProgress] = useState(0);\n\n  // //initialize gsap plugins\n  // gsap.registerPlugin(SplitText);\n\n  // //counter refs\n  // // let loaderNumber100 = useRef(null);\n  // // let loaderNumber88 = useRef(null);\n  // // let loaderNumber22 = useRef(null);\n  // // let loaderNumber0 = useRef(null);\n  // // let loaderNumberPercent = useRef(null);\n  // //loader info refs\n  // let loaderInfo = useRef(null);\n\n  // useLayoutEffect(() => {\n  //     let ctx = gsap.context(() => {\n  //         //define timeline\n  //         const tl = gsap.timeline(),\n  //             loaderNumber22Split = new SplitText(loaderNumber22, { type: \"chars\" }),\n  //             loaderNumber88Split = new SplitText(loaderNumber88, { type: \"chars\" }),\n  //             loaderNumber100Split = new SplitText(loaderNumber100, { type: \"chars\" }),\n  //             chars22 = loaderNumber22Split.chars,\n  //             chars88 = loaderNumber88Split.chars,\n  //             chars100 = loaderNumber100Split.chars;\n\n  //         tl.from(loaderNumber0, {\n  //             duration: DURATION,\n  //             delay: 0.5,\n  //             opacity: 0,\n  //             y: 100,\n  //             ease: \"ease\",\n  //         });\n  //         tl.from(loaderNumberPercent, {\n  //             duration: DURATION,\n  //             delay: PERCENT_DELAY,\n  //             opacity: 0,\n  //             y: 100,\n  //             rotationX: 0,\n  //             ease: \"ease\",\n  //         });\n  //         tl.to(loaderNumber0, {\n  //             duration: DURATION,\n  //             delay: NUMBER_DELAY,\n  //             opacity: 0,\n  //             y: -100,\n  //             ease: \"ease\",\n  //         });\n  //         tl.from(chars22, {\n  //             duration: DURATION,\n  //             opacity: 0,\n  //             y: 100,\n  //             rotationX: 0,\n  //             ease: \"ease\",\n  //             stagger: 0.1\n  //         });\n  //         tl.to(chars22, {\n  //             duration: DURATION,\n  //             delay: NUMBER_DELAY,\n  //             opacity: 0,\n  //             y: -100,\n  //             rotationX: 0,\n  //             ease: \"ease\",\n  //             stagger: 0.1\n  //         });\n  //         tl.from(chars88, {\n  //             duration: DURATION,\n  //             opacity: 0,\n  //             y: 100,\n  //             rotationX: 0,\n  //             ease: \"ease\",\n  //             stagger: 0.1\n  //         });\n  //         tl.to(chars88, {\n  //             duration: DURATION,\n  //             delay: NUMBER_DELAY,\n  //             opacity: 0,\n  //             y: -100,\n  //             rotationX: 0,\n  //             ease: \"ease\",\n  //             stagger: 0.1\n  //         });\n  //         tl.from(chars100, {\n  //             duration: DURATION,\n  //             opacity: 0,\n  //             y: 100,\n  //             rotationX: 0,\n  //             ease: \"ease\",\n  //             stagger: 0.1\n  //         });\n  //         tl.to(chars100, {\n  //             duration: DURATION,\n  //             delay: NUMBER_DELAY,\n  //             opacity: 0,\n  //             y: -100,\n  //             rotationX: 0,\n  //             ease: \"ease\",\n  //             stagger: 0.1\n  //         });\n  //         tl.to(loaderNumberPercent, {\n  //             duration: DURATION,\n  //             delay: PERCENT_DELAY,\n  //             opacity: 0,\n  //             y: -100,\n  //             ease: \"ease\",\n  //         });\n\n  //     })\n\n  //     return () => ctx.revert();\n\n  // })\n\n  // useLayoutEffect(() => {\n  //     let ctx = gsap.context(() => {\n  //         //define timeline\n  //         const tl = gsap.timeline();\n\n  //         tl.from(loaderInfo, {\n  //             duration: DURATION,\n  //             delay: 0.5,\n  //             opacity: 0,\n  //             y: 100,\n  //             ease: \"ease\",\n  //         });\n  //         tl.to(loaderInfo, {\n  //             duration: DURATION,\n  //             delay: 5.5,\n  //             opacity: 0,\n  //             y: -100,\n  //             ease: \"ease\",\n  //         });\n\n  //     })\n\n  //     return () => ctx.revert();\n\n  // })\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"loader\",\n    className: \"loader\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loader-counter\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          ref: el => loaderCounter = el,\n          children: \"000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        ref: el => loaderHeader = el,\n        className: \"loader-header\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          ref: el => loaderHeader = el,\n          children: \"Hello.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 9\n  }, this);\n};\n_s(Loader, \"oodhNoMm/x2ifEQZHByVvhi0/ho=\");\n_c = Loader;\nexport default Loader;\nvar _c;\n$RefreshReg$(_c, \"Loader\");","map":{"version":3,"names":["React","useLayoutEffect","useRef","gsap","SplitText","jsxDEV","_jsxDEV","TIME","Loader","_s","loaderCounter","loaderHeader","registerPlugin","counter","val","ctx","context","tl","timeline","loaderHeaderSplit","type","loaderHeaderChars","chars","from","duration","opacity","y","ease","stagger","delay","to","onUpdate","textContent","Math","ceil","repeatDelay","revert","id","className","children","ref","el","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jaimecastaneda/Projects/Portfolio/portfolio-web/src/pages/loader/loader.js"],"sourcesContent":["import React, { useLayoutEffect, useRef } from 'react';\nimport { gsap } from \"gsap\";\nimport { SplitText } from \"gsap/SplitText\";\n//styles\nimport '../../styles/loader.css';\n\nconst TIME = 5;\n\nconst Loader = () => {\n    //refs\n    let loaderCounter = useRef(null);\n    let loaderHeader = useRef(null);\n\n    //initialize gsap plugins\n    gsap.registerPlugin(SplitText);\n\n    //counter \n    let counter = {\n        val: 0\n    }\n\n    useLayoutEffect(() => {\n        let ctx = gsap.context(() => {\n            //define timeline\n            const tl = gsap.timeline(),\n                //loaderCounterSplit = new SplitText(loaderCounter, { type: \"chars\" }),\n                //loaderCounterChars = loaderCounterSplit.chars,\n                loaderHeaderSplit = new SplitText(loaderHeader, { type: \"chars\" }),\n                loaderHeaderChars = loaderHeaderSplit.chars;\n\n            tl.from(loaderHeaderChars, {\n                duration: 0.5,\n                opacity: 0,\n                y: 20,\n                ease: \"ease\",\n                stagger: 0.05,\n                delay: 0.5,\n            });\n            tl.from(loaderCounter, {\n                duration: 0.4,\n                opacity: 0,\n                ease: \"ease\",\n\n            });\n            tl.to(counter, {\n                duration: TIME,\n                val: 100,\n                onUpdate() {\n                    if (counter.val < 10) {\n                        loaderCounter.textContent = `${Math.ceil(counter.val)}`;\n                    }\n                    loaderCounter.textContent = `${Math.ceil(counter.val)}`;\n                },\n                ease: 'none',\n                repeatDelay: 2,\n            });\n\n\n        })\n\n        return () => ctx.revert();\n\n    });\n\n\n\n\n    // const [progress, setProgress] = useState(0);\n\n    // //initialize gsap plugins\n    // gsap.registerPlugin(SplitText);\n\n    // //counter refs\n    // // let loaderNumber100 = useRef(null);\n    // // let loaderNumber88 = useRef(null);\n    // // let loaderNumber22 = useRef(null);\n    // // let loaderNumber0 = useRef(null);\n    // // let loaderNumberPercent = useRef(null);\n    // //loader info refs\n    // let loaderInfo = useRef(null);\n\n    // useLayoutEffect(() => {\n    //     let ctx = gsap.context(() => {\n    //         //define timeline\n    //         const tl = gsap.timeline(),\n    //             loaderNumber22Split = new SplitText(loaderNumber22, { type: \"chars\" }),\n    //             loaderNumber88Split = new SplitText(loaderNumber88, { type: \"chars\" }),\n    //             loaderNumber100Split = new SplitText(loaderNumber100, { type: \"chars\" }),\n    //             chars22 = loaderNumber22Split.chars,\n    //             chars88 = loaderNumber88Split.chars,\n    //             chars100 = loaderNumber100Split.chars;\n\n    //         tl.from(loaderNumber0, {\n    //             duration: DURATION,\n    //             delay: 0.5,\n    //             opacity: 0,\n    //             y: 100,\n    //             ease: \"ease\",\n    //         });\n    //         tl.from(loaderNumberPercent, {\n    //             duration: DURATION,\n    //             delay: PERCENT_DELAY,\n    //             opacity: 0,\n    //             y: 100,\n    //             rotationX: 0,\n    //             ease: \"ease\",\n    //         });\n    //         tl.to(loaderNumber0, {\n    //             duration: DURATION,\n    //             delay: NUMBER_DELAY,\n    //             opacity: 0,\n    //             y: -100,\n    //             ease: \"ease\",\n    //         });\n    //         tl.from(chars22, {\n    //             duration: DURATION,\n    //             opacity: 0,\n    //             y: 100,\n    //             rotationX: 0,\n    //             ease: \"ease\",\n    //             stagger: 0.1\n    //         });\n    //         tl.to(chars22, {\n    //             duration: DURATION,\n    //             delay: NUMBER_DELAY,\n    //             opacity: 0,\n    //             y: -100,\n    //             rotationX: 0,\n    //             ease: \"ease\",\n    //             stagger: 0.1\n    //         });\n    //         tl.from(chars88, {\n    //             duration: DURATION,\n    //             opacity: 0,\n    //             y: 100,\n    //             rotationX: 0,\n    //             ease: \"ease\",\n    //             stagger: 0.1\n    //         });\n    //         tl.to(chars88, {\n    //             duration: DURATION,\n    //             delay: NUMBER_DELAY,\n    //             opacity: 0,\n    //             y: -100,\n    //             rotationX: 0,\n    //             ease: \"ease\",\n    //             stagger: 0.1\n    //         });\n    //         tl.from(chars100, {\n    //             duration: DURATION,\n    //             opacity: 0,\n    //             y: 100,\n    //             rotationX: 0,\n    //             ease: \"ease\",\n    //             stagger: 0.1\n    //         });\n    //         tl.to(chars100, {\n    //             duration: DURATION,\n    //             delay: NUMBER_DELAY,\n    //             opacity: 0,\n    //             y: -100,\n    //             rotationX: 0,\n    //             ease: \"ease\",\n    //             stagger: 0.1\n    //         });\n    //         tl.to(loaderNumberPercent, {\n    //             duration: DURATION,\n    //             delay: PERCENT_DELAY,\n    //             opacity: 0,\n    //             y: -100,\n    //             ease: \"ease\",\n    //         });\n\n    //     })\n\n    //     return () => ctx.revert();\n\n    // })\n\n    // useLayoutEffect(() => {\n    //     let ctx = gsap.context(() => {\n    //         //define timeline\n    //         const tl = gsap.timeline();\n\n    //         tl.from(loaderInfo, {\n    //             duration: DURATION,\n    //             delay: 0.5,\n    //             opacity: 0,\n    //             y: 100,\n    //             ease: \"ease\",\n    //         });\n    //         tl.to(loaderInfo, {\n    //             duration: DURATION,\n    //             delay: 5.5,\n    //             opacity: 0,\n    //             y: -100,\n    //             ease: \"ease\",\n    //         });\n\n    //     })\n\n    //     return () => ctx.revert();\n\n    // })\n\n\n\n    return (\n        <div id=\"loader\" className='loader'>\n            <div className='loader-container'>\n                <p className='loader-counter'>\n                    <span ref={el => loaderCounter = el}>\n                        000\n                    </span>\n                </p>\n                <h1 ref={el => loaderHeader = el} className='loader-header'>\n                    <span ref={el => loaderHeader = el}>\n                        Hello.\n                    </span>\n                </h1>\n            </div >\n        </div >\n    );\n}\n\nexport default Loader;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}