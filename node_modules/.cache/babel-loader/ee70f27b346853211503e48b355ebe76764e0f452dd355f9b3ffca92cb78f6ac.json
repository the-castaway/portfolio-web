{"ast":null,"code":"var _jsxFileName = \"/Users/jaimecastaneda/Projects/Portfolio/portfolio-web/src/components/location.react.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useMemo } from 'react';\nimport { gsap } from 'gsap';\n//styles\nimport '../styles/location.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Location = () => {\n  _s();\n  // //refs\n  // let time = useRef();\n\n  // const formatTime = (hours, minutes, period) => {\n  //     return `${hours}:${minutes}${period}`;\n  // }\n\n  // //enter animation\n  // useEffect(() => {\n  //     const now = new Date();\n  //     const pstTime = new Date(now.getTime());\n  //     let hours = pstTime.getHours();\n  //     const minutes = pstTime.getMinutes();\n  //     const period = hours >= 12 ? 'pm' : 'am';\n  //     hours = hours % 12 || 12;\n  //     const formattedTime = formatTime(hours, minutes < 10 ? '0' + minutes : minutes, period);\n  //     time = formattedTime;\n  // });\n\n  const [currentTime, setCurrentTime] = useState('');\n  useEffect(() => {\n    const updateTime = () => {\n      const now = new Date();\n      const hours = now.getHours().toString().padStart(2, '0');\n      const minutes = now.getMinutes().toString().padStart(2, '0');\n      const formattedTime = `${hours}:${minutes}`;\n      setCurrentTime(formattedTime);\n    };\n\n    // Update the time initially\n    updateTime();\n\n    // Update the time every minute (60,000 milliseconds)\n    const intervalId = setInterval(updateTime, 60000);\n\n    // Clear the interval on component unmount\n    return () => clearInterval(intervalId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"location\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"location-text\",\n      children: [\"SF Bay Area, \", currentTime]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(Location, \"k0ffgPJ2sZXf+hI6VMRnlXj8X/8=\");\n_c = Location;\nexport default Location;\nvar _c;\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useMemo","gsap","jsxDEV","_jsxDEV","Location","_s","currentTime","setCurrentTime","updateTime","now","Date","hours","getHours","toString","padStart","minutes","getMinutes","formattedTime","intervalId","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jaimecastaneda/Projects/Portfolio/portfolio-web/src/components/location.react.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useMemo } from 'react';\nimport { gsap } from 'gsap';\n//styles\nimport '../styles/location.css';\n\nconst Location = () => {\n    // //refs\n    // let time = useRef();\n\n    // const formatTime = (hours, minutes, period) => {\n    //     return `${hours}:${minutes}${period}`;\n    // }\n\n    // //enter animation\n    // useEffect(() => {\n    //     const now = new Date();\n    //     const pstTime = new Date(now.getTime());\n    //     let hours = pstTime.getHours();\n    //     const minutes = pstTime.getMinutes();\n    //     const period = hours >= 12 ? 'pm' : 'am';\n    //     hours = hours % 12 || 12;\n    //     const formattedTime = formatTime(hours, minutes < 10 ? '0' + minutes : minutes, period);\n    //     time = formattedTime;\n    // });\n\n    const [currentTime, setCurrentTime] = useState('');\n\n    useEffect(() => {\n        const updateTime = () => {\n            const now = new Date();\n            const hours = now.getHours().toString().padStart(2, '0');\n            const minutes = now.getMinutes().toString().padStart(2, '0');\n            const formattedTime = `${hours}:${minutes}`;\n            setCurrentTime(formattedTime);\n        };\n\n        // Update the time initially\n        updateTime();\n\n        // Update the time every minute (60,000 milliseconds)\n        const intervalId = setInterval(updateTime, 60000);\n\n        // Clear the interval on component unmount\n        return () => clearInterval(intervalId);\n    }, []);\n\n\n\n    return (\n        <div className='location'>\n            <div className='location-icon' />\n            <p className='location-text'>\n                SF Bay Area, {currentTime}\n            </p>\n        </div>\n\n    );\n}\n\nexport default Location;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AACnE,SAASC,IAAI,QAAQ,MAAM;AAC3B;AACA,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAElDF,SAAS,CAAC,MAAM;IACZ,MAAMW,UAAU,GAAGA,CAAA,KAAM;MACrB,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;MACtB,MAAMC,KAAK,GAAGF,GAAG,CAACG,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACxD,MAAMC,OAAO,GAAGN,GAAG,CAACO,UAAU,CAAC,CAAC,CAACH,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAC5D,MAAMG,aAAa,GAAI,GAAEN,KAAM,IAAGI,OAAQ,EAAC;MAC3CR,cAAc,CAACU,aAAa,CAAC;IACjC,CAAC;;IAED;IACAT,UAAU,CAAC,CAAC;;IAEZ;IACA,MAAMU,UAAU,GAAGC,WAAW,CAACX,UAAU,EAAE,KAAK,CAAC;;IAEjD;IACA,OAAO,MAAMY,aAAa,CAACF,UAAU,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;EAIN,oBACIf,OAAA;IAAKkB,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACrBnB,OAAA;MAAKkB,SAAS,EAAC;IAAe;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjCvB,OAAA;MAAGkB,SAAS,EAAC,eAAe;MAAAC,QAAA,GAAC,eACZ,EAAChB,WAAW;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAGd,CAAC;AAAArB,EAAA,CApDKD,QAAQ;AAAAuB,EAAA,GAARvB,QAAQ;AAsDd,eAAeA,QAAQ;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}