{"ast":null,"code":"var _jsxFileName = \"/Users/jaimecastaneda/Projects/Portfolio/portfolio-web/src/components/header.react.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { gsap } from 'gsap';\nimport { SplitText } from \"gsap/SplitText\";\nimport { SwitchTransition, Transition } from \"react-transition-group\";\nimport { useLocation } from \"react-router-dom\";\n//styles\nimport '../styles/header.css';\nimport '../styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Header = ({\n  headerContent,\n  isActive\n}) => {\n  _s();\n  gsap.registerPlugin(SplitText);\n  let header = useRef(null);\n  const titleRef = useRef(null);\n  const location = useLocation();\n  useEffect(() => {\n    // const tl = gsap.timeline(),\n    //   mySplitText = new SplitText(header, { type: \"chars\" }),\n    //   chars = mySplitText.chars; //an array of all the divs that wrap each character\n\n    const tl = gsap.timeline(),\n      mySplitText = new SplitText(header, {\n        type: \"chars\"\n      }),\n      chars = mySplitText.chars; //an array of all the divs that wrap each character\n\n    if (isActive) {\n      console.log('enter');\n      tl.from(chars, {\n        duration: 0.8,\n        opacity: 0,\n        y: 200,\n        rotationX: 0,\n        ease: \"ease\",\n        stagger: 0.1\n      });\n    } else {\n      console.log('exit');\n      tl.to(chars, {\n        duration: 0.8,\n        opacity: 0,\n        y: -200,\n        rotationX: 0,\n        ease: \"ease\",\n        stagger: 0.1\n      });\n    }\n  }, [isActive]);\n\n  // if (isExiting) {\n  //   console.log('gsap active')\n\n  //   // var tl = gsap.timeline(),\n  //   //   mySplitText = new SplitText(header, { type: \"chars\" }),\n  //   //   chars = mySplitText.chars; //an array of all the divs that wrap each character\n\n  //   tl.from(chars, {\n  //     duration: 0.8,\n  //     opacity: 0,\n  //     y: 200,\n  //     rotationX: 0,\n  //     ease: \"ease\",\n  //     stagger: 0.1\n  //   });\n\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header-container\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: el => header = el,\n        children: headerContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(Header, \"4pxWVJmYiW0SX1tGCJoV3o1vdY4=\", false, function () {\n  return [useLocation];\n});\n_c = Header;\nexport default Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","useEffect","useRef","gsap","SplitText","SwitchTransition","Transition","useLocation","jsxDEV","_jsxDEV","Header","headerContent","isActive","_s","registerPlugin","header","titleRef","location","tl","timeline","mySplitText","type","chars","console","log","from","duration","opacity","y","rotationX","ease","stagger","to","className","children","ref","el","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jaimecastaneda/Projects/Portfolio/portfolio-web/src/components/header.react.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { gsap } from 'gsap';\nimport { SplitText } from \"gsap/SplitText\";\nimport { SwitchTransition, Transition } from \"react-transition-group\";\nimport {\n  useLocation,\n} from \"react-router-dom\"\n//styles\nimport '../styles/header.css';\nimport '../styles/App.css';\n\nconst Header = ({ headerContent, isActive }) => {\n  gsap.registerPlugin(SplitText);\n  let header = useRef(null);\n  const titleRef = useRef(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    // const tl = gsap.timeline(),\n    //   mySplitText = new SplitText(header, { type: \"chars\" }),\n    //   chars = mySplitText.chars; //an array of all the divs that wrap each character\n\n    const tl = gsap.timeline(),\n      mySplitText = new SplitText(header, { type: \"chars\" }),\n      chars = mySplitText.chars; //an array of all the divs that wrap each character\n\n    if (isActive) {\n      console.log('enter');\n\n\n      tl.from(chars, {\n        duration: 0.8,\n        opacity: 0,\n        y: 200,\n        rotationX: 0,\n        ease: \"ease\",\n        stagger: 0.1\n      });\n    }\n    else {\n      console.log('exit');\n      tl.to(chars, {\n        duration: 0.8,\n        opacity: 0,\n        y: -200,\n        rotationX: 0,\n        ease: \"ease\",\n        stagger: 0.1\n      });\n    }\n  }, [isActive])\n\n\n\n\n\n  // if (isExiting) {\n  //   console.log('gsap active')\n\n  //   // var tl = gsap.timeline(),\n  //   //   mySplitText = new SplitText(header, { type: \"chars\" }),\n  //   //   chars = mySplitText.chars; //an array of all the divs that wrap each character\n\n  //   tl.from(chars, {\n  //     duration: 0.8,\n  //     opacity: 0,\n  //     y: 200,\n  //     rotationX: 0,\n  //     ease: \"ease\",\n  //     stagger: 0.1\n  //   });\n\n\n  // }\n\n\n\n  return (\n\n    <div className='header-container'>\n      <h1 className='header'>\n        {/* <SwitchTransition>\n          <Transition key={location.pathname}\n            timeout={500}\n            onEnter={(node) => {\n              gsap.set(node, { autoAlpha: 0, scale: 0.8, xPercent: -100 });\n              gsap\n                .timeline({ paused: true })\n                .to(node, { autoAlpha: 1, xPercent: 0, duration: 0.25 })\n                .to(node, { scale: 1, duration: 0.25 })\n                .play();\n\n              console.log(\"enter \" + headerContent)\n            }}\n            onExit={(node) => {\n              gsap\n                .timeline({ paused: true })\n                .to(node, { scale: 0.8, duration: 0.2 })\n                .to(node, { xPercent: 100, autoAlpha: 0, duration: 0.2 })\n                .play();\n              console.log(\"exit \" + headerContent)\n            }\n\n            }\n          > */}\n        <div ref={el => header = el} >\n          {headerContent}\n        </div>\n        {/* </Transition>\n        </SwitchTransition> */}\n      </h1>\n    </div>\n\n  );\n}\n\nexport default Header;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,IAAI,QAAQ,MAAM;AAC3B,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,gBAAgB,EAAEC,UAAU,QAAQ,wBAAwB;AACrE,SACEC,WAAW,QACN,kBAAkB;AACzB;AACA,OAAO,sBAAsB;AAC7B,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,MAAM,GAAGA,CAAC;EAAEC,aAAa;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9CV,IAAI,CAACW,cAAc,CAACV,SAAS,CAAC;EAC9B,IAAIW,MAAM,GAAGb,MAAM,CAAC,IAAI,CAAC;EACzB,MAAMc,QAAQ,GAAGd,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMe,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9BN,SAAS,CAAC,MAAM;IACd;IACA;IACA;;IAEA,MAAMiB,EAAE,GAAGf,IAAI,CAACgB,QAAQ,CAAC,CAAC;MACxBC,WAAW,GAAG,IAAIhB,SAAS,CAACW,MAAM,EAAE;QAAEM,IAAI,EAAE;MAAQ,CAAC,CAAC;MACtDC,KAAK,GAAGF,WAAW,CAACE,KAAK,CAAC,CAAC;;IAE7B,IAAIV,QAAQ,EAAE;MACZW,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MAGpBN,EAAE,CAACO,IAAI,CAACH,KAAK,EAAE;QACbI,QAAQ,EAAE,GAAG;QACbC,OAAO,EAAE,CAAC;QACVC,CAAC,EAAE,GAAG;QACNC,SAAS,EAAE,CAAC;QACZC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,MACI;MACHR,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnBN,EAAE,CAACc,EAAE,CAACV,KAAK,EAAE;QACXI,QAAQ,EAAE,GAAG;QACbC,OAAO,EAAE,CAAC;QACVC,CAAC,EAAE,CAAC,GAAG;QACPC,SAAS,EAAE,CAAC;QACZC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;;EAMd;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;;EAIA,oBAEEH,OAAA;IAAKwB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,eAC/BzB,OAAA;MAAIwB,SAAS,EAAC,QAAQ;MAAAC,QAAA,eAyBpBzB,OAAA;QAAK0B,GAAG,EAAEC,EAAE,IAAIrB,MAAM,GAAGqB,EAAG;QAAAF,QAAA,EACzBvB;MAAa;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAGV,CAAC;AAAA3B,EAAA,CAvGKH,MAAM;EAAA,QAIOH,WAAW;AAAA;AAAAkC,EAAA,GAJxB/B,MAAM;AAyGZ,eAAeA,MAAM;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}